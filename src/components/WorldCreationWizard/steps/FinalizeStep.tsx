'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { World, WorldImage } from '@/types/world.types';
import { wizardStyles, WizardFormSection } from '@/components/shared/wizard';
import { DataField } from '@/components/shared/DataField';
import { ImageGenerationSection } from '@/components/shared';
import { WorldImage as WorldImageComponent } from '@/components/WorldImage';
// Removed direct AI client imports - using API routes instead

interface FinalizeStepProps {
  worldData: Partial<World>;
  errors: Record<string, string>;
  onComplete: () => void;
  onBack?: () => void;
  onCancel?: () => void;
  onUpdateWorldData?: (updates: Partial<World>) => void;
}

export default function FinalizeStep({
  worldData,
  errors,
  onComplete,
  onBack,
  onCancel,
  onUpdateWorldData,
}: FinalizeStepProps) {
  const [isGeneratingImage, setIsGeneratingImage] = useState(false);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);
  
  // Logger function that can be easily disabled for production
  const log = (message: string, data?: unknown) => {
    if (process.env.NODE_ENV === 'development') {
      console.log(message, data);
    }
  };

  const handleGenerateImage = useCallback(async (customPrompt?: string) => {
    if (!onUpdateWorldData) return;
    
    setIsGeneratingImage(true);
    try {
      // Create a temporary world object for image generation
      const tempWorld = {
        id: 'temp',
        name: worldData.name || 'Untitled World',
        description: worldData.description || '',
        theme: worldData.theme || 'fantasy',
        ...worldData
      } as World;
      
      // Use the world image generation API route
      const response = await fetch('/api/generate-world-image', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          world: tempWorld,
          customPrompt
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to generate world image');
      }

      const { imageUrl } = await response.json();
      
      const image: WorldImage = {
        type: 'ai-generated',
        url: imageUrl,
        generatedAt: new Date().toISOString()
      };
      
      onUpdateWorldData({ image });
    } catch (err) {
      console.error('Failed to generate world image:', err);
      throw err;
    } finally {
      setIsGeneratingImage(false);
    }
  }, [onUpdateWorldData, worldData]);

  // Auto-generate world image when arriving on this step with AI-generated data
  useEffect(() => {
    const shouldAutoGenerate = 
      onUpdateWorldData && // Can update world data
      worldData.name && worldData.description && // Has required data
      !worldData.image?.url && // No image yet
      !hasAutoGenerated && // Haven't auto-generated yet
      !isGeneratingImage; // Not already generating

    if (shouldAutoGenerate) {
      console.log('[FinalizeStep] Auto-generating world image for AI-generated world');
      setHasAutoGenerated(true);
      handleGenerateImage();
    }
  }, [worldData, onUpdateWorldData, hasAutoGenerated, isGeneratingImage, handleGenerateImage]);

  const handleRemoveImage = () => {
    if (!onUpdateWorldData) return;
    
    const placeholderImage: WorldImage = {
      type: 'placeholder',
      url: null,
      generatedAt: new Date().toISOString()
    };
    
    onUpdateWorldData({ image: placeholderImage });
  };

  const handleComplete = () => {
    log('[FinalizeStep.tsx - handleComplete] Button clicked, function entered.');
    if (onComplete) {
      log('[FinalizeStep.tsx - handleComplete] Calling onComplete prop.');
      onComplete();
    } else {
      log('[FinalizeStep.tsx - handleComplete] onComplete function is not provided');
      console.error('[FinalizeStep.tsx - handleComplete] onComplete function is not provided');
    }
  };
  
  return (
    <div data-testid="finalize-step">
      <WizardFormSection
        title="Review Your World"
        description="Review your world configuration before creating it. You can go back to make changes or proceed to create your world."
      >

      <div className="space-y-6">
        <div>
          <h3 className={wizardStyles.subheading}>Basic Information</h3>
          <div className="space-y-3">
            <DataField 
              label="Name" 
              value={<span data-testid="review-world-name">{worldData.name}</span>}
              variant="inline"
              size="md"
            />
            <DataField 
              label="Genre" 
              value={<span data-testid="review-world-genre">{worldData.theme}</span>}
              variant="inline"
              size="md"
            />
            <DataField 
              label="Description" 
              value={<p data-testid="review-world-description">{worldData.description}</p>}
              variant="stacked"
              size="md"
            />
          </div>
        </div>

        {/* World Image Section */}
        <div className={wizardStyles.divider}>
          <h3 className={wizardStyles.subheading}>World Image</h3>
          {onUpdateWorldData ? (
            <ImageGenerationSection
              title=""
              description="Generate an AI image that represents your world. This will be displayed on world cards and as a hero image."
              currentImageUrl={worldData.image?.url}
              currentImageType={worldData.image?.type}
              generatedAt={worldData.image?.generatedAt}
              currentPrompt={worldData.image?.prompt}
              isGenerating={isGeneratingImage}
              onGenerate={handleGenerateImage}
              onRemove={handleRemoveImage}
              customPromptLabel="Customize world image description"
              customPromptPlaceholder="Describe the specific visual elements you want in the world image (landscape, architecture, atmosphere, etc.)"
              customPromptHelpText="This will override the auto-generated prompt based on world details for this generation only"
              generateButtonText="Generate World Image"
              regenerateButtonText="Regenerate World Image"
              removeButtonText="Remove World Image"
              imageComponent={
                <WorldImageComponent
                  image={worldData.image || { type: 'placeholder', url: null }}
                  worldName={worldData.name || 'Untitled World'}
                  size="medium"
                />
              }
              className="shadow-none bg-transparent p-0"
            />
          ) : (
            <div className="text-center py-8">
              <WorldImageComponent
                image={worldData.image || { type: 'placeholder', url: null }}
                worldName={worldData.name || 'Untitled World'}
                size="medium"
              />
              <p className="text-sm text-gray-600 mt-2">
                {worldData.image?.url ? 'World image will be generated after creation' : 'No world image will be generated'}
              </p>
            </div>
          )}
        </div>

        <div className={wizardStyles.divider} data-testid="review-attributes-section">
          <h3 className={wizardStyles.subheading}>Attributes ({worldData.attributes?.length || 0})</h3>
        {worldData.attributes && worldData.attributes.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {worldData.attributes.map((attr, index) => (
              <div key={index} className={`${wizardStyles.card.base} bg-gray-50`} data-testid={`review-attribute-${index}`}>
                <div className="font-semibold">{attr.name}</div>
                <div className="text-sm">{attr.description}</div>
                <div className="text-sm text-gray-500">
                  Range: {attr.minValue} - {attr.maxValue}
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p className="text-gray-500 italic">No attributes selected</p>
        )}
        </div>

        <div className={wizardStyles.divider} data-testid="review-skills-section">
          <h3 className={wizardStyles.subheading}>Skills ({worldData.skills?.length || 0})</h3>
        {worldData.skills && worldData.skills.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {worldData.skills.map((skill, index) => (
              <div key={index} className={`${wizardStyles.card.base} bg-gray-50`} data-testid={`review-skill-${index}`}>
                <div className="flex justify-between items-center mb-2">
                  <span className="font-semibold">{skill.name}</span>
                  <span className={`${wizardStyles.badge.base} ${
                    skill.difficulty === 'easy' ? wizardStyles.badge.success :
                    skill.difficulty === 'medium' ? wizardStyles.badge.warning : 
                    wizardStyles.badge.danger
                  }`}>
                    {skill.difficulty}
                  </span>
                </div>
                <div className="text-sm">{skill.description}</div>
                {skill.linkedAttributeId && (
                  <div className="text-sm text-blue-600 mt-1">
                    Linked to: {worldData.attributes?.find(a => a.id === skill.linkedAttributeId)?.name || 'Unknown'}
                  </div>
                )}
              </div>
            ))}
          </div>
        ) : (
          <p className="text-gray-500 italic">No skills selected</p>
        )}
        </div>
      </div>
      </WizardFormSection>

      {errors.submit && (
        <div className={wizardStyles.errorContainer} data-testid="submit-error">
          {errors.submit}
        </div>
      )}

      <div className="mt-6 flex justify-between">
        <div className="flex gap-2">
          <button
            type="button"
            onClick={onCancel || (() => window.history.back())}
            className={wizardStyles.navigation.cancelButton}
          >
            Cancel
          </button>
          
          {onBack && (
            <button
              type="button"
              onClick={onBack}
              className={wizardStyles.navigation.secondaryButton}
            >
              Back
            </button>
          )}
        </div>
        
        <button
          type="button"
          data-testid="step-complete-button"
          onClick={() => {
            log('[FinalizeStep.tsx - inline onClick] Button raw click detected.');
            handleComplete();
          }}
          className={wizardStyles.navigation.primaryButton}
        >
          Create World
        </button>
      </div>
    </div>
  );
}

